/*
 * This Java source file was generated by the Gradle 'init' task.
 */


import brainf_ck.Brain;
import brainf_ck.Brainf_ck;
import brainf_ck.Brainf_ckCommandline;
import brainf_ck.ByteCode;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;


import java.io.*;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

class Brainf_ckTest {
    private static Map<String, Byte> BYTE_STRING_CODE_MAPPING;

    static {
        BYTE_STRING_CODE_MAPPING = new HashMap<>();
        BYTE_STRING_CODE_MAPPING.put("+", Brain.BYTECODE_INC);
        BYTE_STRING_CODE_MAPPING.put("-", Brain.BYTECODE_DEC);
        BYTE_STRING_CODE_MAPPING.put("++", Brain.BYTECODE_INC_MULTI);
        BYTE_STRING_CODE_MAPPING.put("--", Brain.BYTECODE_DEC_MULTI);
        BYTE_STRING_CODE_MAPPING.put("<", Brain.BYTECODE_PREV);
        BYTE_STRING_CODE_MAPPING.put(">", Brain.BYTECODE_NEXT);
        BYTE_STRING_CODE_MAPPING.put("<<", Brain.BYTECODE_PREV_MULTI);
        BYTE_STRING_CODE_MAPPING.put(">>", Brain.BYTECODE_NEXT_MULTI);
        BYTE_STRING_CODE_MAPPING.put("[", Brain.BYTECODE_START_LOOP);
        BYTE_STRING_CODE_MAPPING.put("]", Brain.BYTECODE_END_LOOP);
        BYTE_STRING_CODE_MAPPING.put(",", Brain.BYTECODE_READ_FROM_INPUT);
        BYTE_STRING_CODE_MAPPING.put(".", Brain.BYTECODE_PRINT);
        BYTE_STRING_CODE_MAPPING.put("#", Brain.BYTECODE_DEBUGGER);

        BYTE_STRING_CODE_MAPPING.put("[-]", Brain.BYTECODE_SET_TO_0);
        BYTE_STRING_CODE_MAPPING.put("[-]>", Brain.BYTECODE_SET_TO_0_AND_MOVE);
        BYTE_STRING_CODE_MAPPING.put("[-]>[-]>", Brain.BYTECODE_SET_TO_0_AND_MOVE_MULTI);
    }
    private Reader reader;
    private InputStream originalIn;

    Reader ReadReader(String testfile) throws FileNotFoundException, URISyntaxException {
        URL resource = Brainf_ckTest.class.getResource("tests/"+testfile);
        File file = Paths.get(resource.toURI()).toFile();
        reader = new FileReader(file);
        return reader;
    }

    @AfterEach
    void CloseReader() throws IOException {
        Brainf_ck._verbose = 0;
        if (reader != null) {
            reader.close();
        }
    }

    private void assertByteCode(ByteCode byteCode, String codeChar) {
        this.assertByteCode(byteCode, BYTE_STRING_CODE_MAPPING.get(codeChar));
    }

    private void assertByteCode(ByteCode byteCode, String codeChar, Integer count) {
        this.assertByteCode(byteCode, BYTE_STRING_CODE_MAPPING.get(codeChar), count);
    }

    private void assertByteCode(ByteCode byteCode, byte code) {
        var codeFromBytes = byteCode.next();
        if (Brain.BYTECODES_SET_1_BYTE.contains(codeFromBytes)) {
            Assertions.assertEquals(code, codeFromBytes);
        } else {
            Assertions.fail("Single bytecode expected but received multi "+codeFromBytes);
        }
    }

    private void assertByteCode(ByteCode byteCode, byte code, Integer count) {
        var codeFromBytes = byteCode.next();
        if (!Brain.BYTECODES_SET_1_BYTE.contains(codeFromBytes)) {
            Assertions.assertEquals(code, codeFromBytes);
            var countFromBytes = byteCode.nextInt();
            Assertions.assertEquals(count, countFromBytes);
        } else {
            Assertions.fail("Multi bytecode expected but received single "+codeFromBytes);
        }
    }

    @Test void run_fromfile_ok() throws URISyntaxException, IOException {
        // Arrange
        var bf = ReadReader("step2.bf");

        // Action
        new Brainf_ckCommandline();
    }

    @Test void interpret_dataInc_ok() throws IOException {
        // Arrange
        Brainf_ck._verbose = 2;
        var context = new Brain("++", 10);
        var mem = context.memory();

        // Action
        context.interpret();
        context.interpretUsingVM();

        // Assert
        Assertions.assertEquals(2, mem[0]);
    }


    @Test void interpret_nextInc_ok() throws IOException {
        // Arrange
        Brainf_ck._verbose = 2;
        var context = new Brain(">+++", 10);
        var mem = context.memory();

        // Action
        context.interpret();
        context.interpretUsingVM();

        // Assert
        Assertions.assertEquals(0, mem[0]);
        Assertions.assertEquals(3, mem[1]);
    }

    @Test void interpret_nextDecInc_ok() throws IOException {
        // Arrange
        Brainf_ck._verbose = 2;
        var context = new Brain(">+<++", 10);
        var mem = context.memory();

        // Action
        context.interpret();
        context.interpretUsingVM();

        // Assert
        Assertions.assertEquals(2, mem[0]);
        Assertions.assertEquals(1, mem[1]);
    }
    @Test void interpret_loop1_ok() throws IOException {
        // Arrange
        Brainf_ck._verbose = 2;
        var context = new Brain("[ loop ]>+", 10);
        var mem = context.memory();

        // Action
        context.interpret();
        context.interpretUsingVM();

        // Assert
        Assertions.assertEquals(0, mem[0]);
        Assertions.assertEquals(1, mem[1]);
    }

    @Test void interpret_loop2_ok() throws IOException {
        // Arrange
        Brainf_ck._verbose = 2;
        var context = new Brain("[ [loop] ]>+", 10);
        var mem = context.memory();

        // Action
        context.interpret();
        context.interpretUsingVM();

        // Assert
        Assertions.assertEquals(0, mem[0]);
        Assertions.assertEquals(1, mem[1]);
    }

    @Test void interpret_iterate_loop1_ok() throws IOException {
        // Arrange
        Brainf_ck._verbose = 2;
        var context = new Brain("++[-]>+", 10);
        var mem = context.memory();

        // Action
        context.interpret();
        context.interpretUsingVM();

        // Assert
        Assertions.assertEquals(0, mem[0]);
        Assertions.assertEquals(1, mem[1]);
    }

    @Test void compile_simple_ok() throws IOException {
        // Arrange
        var context = new Brain("+>+-<-", 10);

        // Action
        var bytecode = context.compile();

        // Assert
        Assertions.assertEquals(6, bytecode.length());
        this.assertByteCode(bytecode, "+");
        this.assertByteCode(bytecode, ">");
        this.assertByteCode(bytecode, "+");
        this.assertByteCode(bytecode, "-");
        this.assertByteCode(bytecode, "<");
        this.assertByteCode(bytecode, "-");
    }

    @Test void compile_iterate_loop1_ok() throws IOException {
        // Arrange
        var context = new Brain("[]>+", 10);

        // Action
        var bytecode = context.compile();

        // Assert
        Assertions.assertEquals(12, bytecode.length());
        this.assertByteCode(bytecode, "[", 5);
        this.assertByteCode(bytecode, "]", 10);
        this.assertByteCode(bytecode, ">");
        this.assertByteCode(bytecode, "+");
    }
    @Test void compile_iterate_longer_ok() throws IOException {
        // Arrange
        var context = new Brain("+[[]-]>+", 10);

        // Action
        var bytecode = context.compile();

        // Assert
        Assertions.assertEquals(24, bytecode.length());
        this.assertByteCode(bytecode, "+");
        this.assertByteCode(bytecode, "[", 16);
        this.assertByteCode(bytecode, "[", 5);
        this.assertByteCode(bytecode, "]", 10);
        this.assertByteCode(bytecode, "-");
        this.assertByteCode(bytecode, "]", 21);
        this.assertByteCode(bytecode, ">");
        this.assertByteCode(bytecode, "+");

    }

    @Test void interpret_hello_ok() throws IOException {
        // Arrange
        var context = new Brain("++++++++++[>+>+++>+++++++>++++++++++<<<<-]>>>++.>+.+++++++..+++.", 10);

        // Action
        var bytecode = context.compile();
        context.interpretUsingVM();

        // Assert
        Assertions.assertEquals(68, bytecode.length());


    }

    @Test void compile_setto0_ok() throws IOException {
        // Arrange
        var context = new Brain("+[-]", 10);

        // Action
        var bytecode = context.compile();

        // Assert
        Assertions.assertEquals(2, bytecode.length());
        this.assertByteCode(bytecode, "+");
        this.assertByteCode(bytecode, "[-]");
    }

    @Test void compile_setto0xtimes_ok() throws IOException {
        // Arrange
        var context = new Brain("+>++>+++<<[-]>[-]>[-]>", 10);

        // Action
        var bytecode = context.compile();

        // Assert
        Assertions.assertEquals(23, bytecode.length());
        this.assertByteCode(bytecode, "+");
        this.assertByteCode(bytecode, ">");
        this.assertByteCode(bytecode, "++",2);
        this.assertByteCode(bytecode, ">");
        this.assertByteCode(bytecode, "++", 3);
        this.assertByteCode(bytecode, "<<", 2);
        this.assertByteCode(bytecode, "[-]>[-]>", 3);
    }

    @Test void compile_setto0andmove_ok() throws IOException {
        // Arrange
        var context = new Brain("+[-]>+", 10);

        // Action
        var bytecode = context.compile();
        context.interpretUsingVM();
        var memory = context.memory();

        // Assert
        Assertions.assertEquals(3, bytecode.length());

        this.assertByteCode(bytecode, "+");
        this.assertByteCode(bytecode, "[-]>");
        this.assertByteCode(bytecode, "+");
    }

    @Test void execute_setto0_ok() throws IOException {
        // Arrange
        var context = new Brain("+>+[-]<>>++", 10);

        // Action
        var bytecode = context.compile();
        context.interpretUsingVM();
        var memory = context.memory();

        // Assert
        Assertions.assertEquals(15, bytecode.length());
        this.assertByteCode(bytecode, "+");
        this.assertByteCode(bytecode, ">");
        this.assertByteCode(bytecode, "+");
        this.assertByteCode(bytecode, "[-]");
        this.assertByteCode(bytecode, "<");
        this.assertByteCode(bytecode, ">>", 2);
        this.assertByteCode(bytecode, "++", 2);

        // memory should be: 1 0 1
        Assertions.assertEquals(1, memory[0]);
        Assertions.assertEquals(0, memory[1]);
        Assertions.assertEquals(2, memory[2]);
    }

    @Test void executeVm_setto0andmove_ok() throws IOException {
        // Arrange
        var context = new Brain("+[-]>+", 10);

        // Action
        context.interpretUsingVM();
        var bytecode = context.byteCode();
        var memory = context.memory();

        // Assert
        Assertions.assertEquals(3, bytecode.length());
        this.assertByteCode(bytecode, "+");
        this.assertByteCode(bytecode, "[-]>");
        this.assertByteCode(bytecode, "+");
    }

    @Test void interpretVM_fromfile_mandelbrot_ok() throws URISyntaxException, IOException {
        // Arrange
        var bf = ReadReader("mandelbrot.bf");

        // Action
        new Brainf_ckCommandline().run(bf);
    }

    @Test void compile_fromMissingLBracket_exception() throws IOException {
        // Arrange
        var code = "+++++[>+++++++>++<<-]>.>.[";

        // Act
        Assertions.assertThrows(IllegalArgumentException.class,() -> {
                new Brain(code).interpretUsingVM();
        });
    }

    @Test void compile_fromMissingRBracket_exception() throws IOException {
        // Arrange
        var code = "+++++[>+++++++>++<<-]>.>.][";

        // Act
        Assertions.assertThrows(IllegalArgumentException.class,() -> {
            new Brain(code).interpretUsingVM();
        });
    }

    @BeforeEach
    void setUpSystemIn() {
        // Save the original System.in
        originalIn = System.in;
    }
    @AfterEach
    void tearDownSystemIn() {
        // Restore the original System.in
        System.setIn(originalIn);
    }

    @Test void compile_rot13_ok() throws URISyntaxException, IOException {
        // Arrange
        var bf = ReadReader("rot13.bf");

        // Simulate user input as a single character 'A'
        String input = "~mlk zyx";
        byte[] inputBytes = input.getBytes();
        byte[] extendedBytes = new byte[inputBytes.length + 1];

        // Copy input bytes and append 0 at the end
        System.arraycopy(inputBytes, 0, extendedBytes, 0, inputBytes.length);
        extendedBytes[extendedBytes.length - 1] = 0;
        var in = new ByteArrayInputStream(extendedBytes);
        System.setIn(in);

        // Action
        Brainf_ck._interpret=false;
        Brainf_ck._bufferSize=1;
        new Brainf_ckCommandline().run(bf);

    }

}
